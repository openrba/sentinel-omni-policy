# This policy uses the Sentinel tfplan and external json docs to require that all 
# resource deployments meet the policy requirements outlined in the yaml documents.

# Note that the comparison is always case-sensitive.

##### Imports #####

import "tfplan/v2" as tfplan
import "strings"
import "types"
import "http"
import "json"


# Pre-fetch the naming convention allowed values
req = http.request("https://raw.githubusercontent.com/openrba/python-omni-policy/master/data/custom.json")
naming_dct = json.unmarshal(http.get(req).body)

##### Functions #####

validate_naming_convention = func(policy,value){
# This function takes in a naming convention policy and a proposed value
# and determines if the convention meets the value provided.
# Expects policy in the form of <variablename1>-<variablename2>-[0-9][0-9]

    x = 0
    str = ""
    keep_going = true

    for strings.split(policy, ">") as e{
    # Break convention into elements

        # If the check has failed on a previous loop we are done    
        if not keep_going{
            str="[0-9](100)"
            break
        }

        # If this is the first loop start with a string beginning regex
        if x == 0{
            str += "^"
        }

        # Split the element into fields that we can look up
        fields = strings.split(e,"<")

        # Get the characters in between the fields and save them
        if fields[0] is not null{
            str += fields[0]
        }

        # Lets start to look up allowed values for the field
        if fields[1] else null is not null{
            var = fields[1]
            
            if naming_dct[var] else null is not null {
            # The field exists in the naming convention lookup    
                
                keep_going = false
                # Set the pointer to false unless we can validate

                for naming_dct[var]["allowed_values"] as short_name, long_name{
                # Loop through all the allowed values and see if we match
                    reg = str + short_name
                    if value matches reg {
                    # We found a match, lets keep going
                        keep_going = true
                        str = reg
                        break
                    }
                }
            }
            
        }
        x = x + 1
    }
    
    # Do the final regex expression check to see if we match the convention
    if value matches str {
        validated = true
    }else{
        validated = false
    }
    return validated
}

validate_resource = func(name,resource){
# This function validates the resource against a set of policies that
# are defined in the python-terraform-policy repository.  It performs
# the following validation tests;
# 1. Validates that are arguments listed as 'required' exist in this deployment
# 2. Validates the argument policy against str,list,regex, and naming con.
# 3. Validates tags against required, custom keys / values.

    validated = true
    category = strings.split(name,"_")[0]
    req = http.request("https://raw.githubusercontent.com/openrba/" +
                        "python-omni-policy/master/data/" + category + "/" +
                        name + ".json")
    policy_dict = json.unmarshal(http.get(req).body)
    
    arguments = policy_dict[name]["arguments"]
    
    # Validate all required arguments exist
    provided_args = {}
    for resource.applied else {} as key,value{
        
        if types.type_of(resource.applied[key]) is not "string" and 
         types.type_of(resource.applied[key]) is not "bool" and
         key is not "tags"{
            # Handle the maps
            if types.type_of(resource.applied[key][0]) is not "string"{
                for resource.applied[key][0] else {} as k,v {
                    provided_args[k] = v
                }
            }
        }else{
            # Append to the list of arguments
            provided_args[key] = value
        }
    }

    #print(provided_args)

    for arguments as arg{
        if arguments[arg]["required"]{
            if arg not in keys(provided_args){
                validated = false
                print("Policy check failed. Required argument '",
                        arg,":' is missing for resource",name,".")
            }
        }
    }

    for provided_args else {} as key,value {
        
        # Check to see if attribute exists in the policy
        argument = policy_dict[name]["arguments"][key]
        if key == "tags" {
            
            #First check if all required tags are present
            provided_tags = keys(resource.applied["tags"])
            required_tags = keys(naming_dct["tagName"]["allowed_values"])

            if not all required_tags as rt {rt in provided_tags}{
                validated = false
                print("Policy check failed. At least one required tag '",
                     required_tags,": is not present for resource",
                     name)
            }
        
            #Then lets check to make sure all required tags have allowed_values
            for provided_tags else {} as key {
                
                var = naming_dct["tagName"]["allowed_values"][key] else false
                if var is not false {
                    supplied_value = resource.applied["tags"][key]
                    if supplied_value not in naming_dct[var]["allowed_values"] {
                        validated = false
                        print("Policy check failed. Supplied tag '",
                        key, "' contains a value '",supplied_value,"' that is",
                        "not an allowed value for that tag - resource",name,".")
                    }
                }
            }
        }
        if argument else null is not null {
            
            if argument["policy"] != "" {
                
                
            # We have a policy for this argument

                policy = argument["policy"]
                
                if types.type_of(policy) is not "string" and 
                   types.type_of(policy) is not "bool"{
                # Policy type is a list, check values against it
                    in_list = false
                    for policy as str {
                        if str == value{
                            in_list = true
                        }
                    }
                    if in_list == false {
                        print("Policy check failed: Argument '",key,
                        ":' for resource",name,"did not meet the allowed",
                        "values of",policy)
                        validated = false
                    }
                }else if  types.type_of(policy) is not "string"{
                # Should be a bool
                    if value != policy {
                        print("Policy check failed. Argument '",key,
                            ":' for resource",name,"did not meet the allowed",
                            "value of",policy)
                        validated = false
                    }
                }else{
                    if policy matches "<*.>" {
                    # We need to validate a naming convention
                        if not validate_naming_convention(policy,value) {
                            print("Policy check failed: Argument '",key,
                            ":' for resource",name,"did not meet the naming",
                            "convention of",policy,"was given",value)
                            validated = false
                        }
                    } else if value not matches policy{
                    # Policy type is a regex and doesnt match
                        
                        print("Policy check failed. Argument '",key,
                            ":' for resource",name,"did not meet the allowed",
                            "value of",policy)
                        validated = false
                        
                    }
                }
            }
        }
    }
    return validated
}

validate = func(){
    
    validated = false
    validation_lst = []
    # Iterate over all modules in the tfplan import
    for tfplan.module_paths as path {
        # Iterate over all resources in each module
        for tfplan.module(path).resources else {} as name, resource {
            # Iterate over resource types
            for resource else {} as index, mains {
                # Iterate over indexed resource
                for mains else {} as index, r {
                    # Skip anything that is being destroyed and not recreated
                    if r.destroy and not r.requires_new {
                        print("Skipping resource", address, "that is being destroyed.")
                        continue
                    }
                    # Validate the resource and arguments
                    append(validation_lst,validate_resource(name,r))
                    break
                }
            }
        }
    }
    if any validation_lst as v{v is false}{
        return false
    }else{
        return true
    }
}

test_regex = func(){
    str = "h1stname"
    for range(0,10) as i{
        for ["^[a-z](5)"] as reg{
            if str matches reg {
                print("SUCCESS:",str,"matched",reg)
            }
        }
    }
    return true
}

#main = test_regex()
main = validate()